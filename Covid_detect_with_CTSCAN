from flask import Flask, render_template, request
from flask_uploads import UploadSet, configure_uploads, IMAGES
import torch
import torchvision
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import torch.nn.functional as F
import torch.nn as nn
import torch.optim as optim
import os
import matplotlib.pyplot as plt
from torch.optim.lr_scheduler import StepLR
import numpy as np
from datetime import datetime
import pandas as pd
import random 
from torchvision.datasets import ImageFolder
import re
from torch.utils.data import Dataset, DataLoader
import matplotlib.pyplot as plt
from PIL import Image
from torch.optim.lr_scheduler import StepLR
from PIL import ImageFile
from PIL import Image
import torchvision.models as models
import warnings
warnings.filterwarnings('ignore')


torch.cuda.empty_cache()
device = 'cuda'

app = Flask(__name__)
app.config["DEBUG"] = True

photos = UploadSet('photos', IMAGES)

app.config['UPLOAD_FOLDER']=os.path.join('static', 'img')
app.config['UPLOADED_PHOTOS_DEST'] = 'Images-processed/CT_NonCOVID'
configure_uploads(app, photos)

@app.route('/', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST' and 'photo' in request.files:
        filename = photos.save(request.files['photo'])
        f=open('Data-split/NonCOVID/a_testCT_NonCOVID.txt','w')
        f.write(filename)
        return "<h1 style='color:Green; margin:25%;' align='center'>File Uploaded</h1>"
    full_filename = os.path.join(app.config['UPLOAD_FOLDER'], 'logo.jpg')
    return render_template('upload.html', user_image = full_filename)


@app.route('/result', methods=['GET', 'POST'])

def result():
    normalize = transforms.Normalize(mean=[0.45271412, 0.45271412, 0.45271412],
                                         std=[0.33165374, 0.33165374, 0.33165374])

    val_transformer = transforms.Compose([
        transforms.Resize((224,224)),
        transforms.ToTensor(),
        normalize
    ])


    batchsize=4
    def read_txt(txt_path):
        with open(txt_path) as f:
            lines = f.readlines()
        txt_data = [line.strip() for line in lines]
        return txt_data

    class CovidCTDataset(Dataset):
        def __init__(self, root_dir, txt_COVID, txt_NonCOVID, transform=None):
            self.root_dir = root_dir
            self.txt_path = [txt_COVID,txt_NonCOVID]
            self.classes = ['CT_COVID', 'CT_NonCOVID']
            self.num_cls = len(self.classes)
            self.img_list = []
            for c in range(self.num_cls):
                cls_list = [[os.path.join(self.root_dir,self.classes[c],item), c] for item in read_txt(self.txt_path[c])]
                self.img_list += cls_list
            self.transform = transform

        def __len__(self):
            return len(self.img_list)

        def __getitem__(self, idx):
            if torch.is_tensor(idx):
                idx = idx.tolist()

            img_path = self.img_list[idx][0]
            image = Image.open(img_path).convert('RGB')

            if self.transform:
                image = self.transform(image)
            sample = {'img': image,
                      'label': int(self.img_list[idx][1])}
            return sample

    testset = CovidCTDataset(root_dir='Images-processed',
                              txt_COVID='Data-split/COVID/a_testCT_COVID.txt',
                              txt_NonCOVID='Data-split/NonCOVID/a_testCT_NonCOVID.txt',
                              transform= val_transformer)

    print(testset.__len__())

    test_loader = DataLoader(testset, batch_size=batchsize, drop_last=False, shuffle=False)


    """Load Self-Trans model"""
    """Change names and locations to the Self-Trans.pt"""


    model = models.densenet169(pretrained=True).cuda()
    pretrained_net = torch.load('Self-Trans.pt')


    model.load_state_dict(pretrained_net)

    modelname = 'Dense169_ssl_luna_moco'

    def test(epoch):
        model.eval()
        test_loss = 0
        correct = 0
        results = []

        TP = 0
        TN = 0
        FN = 0
        FP = 0


        criteria = nn.CrossEntropyLoss()
        with torch.no_grad():
            tpr_list = []
            fpr_list = []

            predlist=[]
            scorelist=[]
            targetlist=[]
            # Predict
            for batch_index, batch_samples in enumerate(test_loader):
                data, target = batch_samples['img'].to(device), batch_samples['label'].to(device)
                output = model(data)

                test_loss += criteria(output, target.long())
                score = F.softmax(output, dim=1)
                pred = output.argmax(dim=1, keepdim=True)
                correct += pred.eq(target.long().view_as(pred)).sum().item()
                targetcpu=target.long().cpu().numpy()
                predlist=np.append(predlist, pred.cpu().numpy())
                scorelist=np.append(scorelist, score.cpu().numpy()[:,1])
                targetlist=np.append(targetlist,targetcpu)
        return targetlist, scorelist, predlist

    # test
    bs = 10
    epoch = 1
    r_list = []
    p_list = []
    acc_list = []
    vote_pred = np.zeros(testset.__len__())
    vote_score = np.zeros(testset.__len__())


    targetlist, scorelist, predlist = test(epoch)
    print('target',targetlist)
    print('score',scorelist)
    print('predict',predlist)
    vote_pred = vote_pred + predlist 
    vote_score = vote_score + scorelist 

    TP = ((predlist == 1) & (targetlist == 1)).sum()
    TN = ((predlist == 0) & (targetlist == 0)).sum()
    FN = ((predlist == 0) & (targetlist == 1)).sum()
    FP = ((predlist == 1) & (targetlist == 0)).sum()

    print('TP=',TP,'TN=',TN,'FN=',FN,'FP=',FP)
    print('TP+FP',TP+FP)
    p = TP / (TP + FP)
    print('precision',p)
    p = TP / (TP + FP)
    r = TP / (TP + FN)
    print('recall',r)
    F1 = 2 * r * p / (r + p)
    acc = (TP + TN) / (TP + TN + FP + FN)
    print('F1',F1)
    print('acc',acc)
    if(acc==1):
        return "<h1 style='color:green; margin:25%;' align='center'>COVID NOT DETECTED</h1>"
    else:
        return "<h1 style='color:red; margin:25%;' align='center'>COVID DETECTED</h1>"
    return render_template('result.html')

if __name__ == "__main__":
    app.run(debug=False)
